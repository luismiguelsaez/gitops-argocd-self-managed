apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: ingress-nginx-external
  namespace: argocd
  finalizers:
    - resources-finalizer.argocd.argoproj.io
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  project: ingress
  destination:
    namespace: ingress
    server: https://kubernetes.default.svc
  syncPolicy:
    automated:
      prune: false
      selfHeal: true
      allowEmpty: false
    syncOptions:
      - CreateNamespace=true
      - Validate=true
      - RespectIgnoreDifferences=true
      - ServerSideApply=true
    retry:
      limit: 10
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 5m
  source:
    chart: ingress-nginx
    repoURL: https://kubernetes.github.io/ingress-nginx
    targetRevision: 4.10.0
    path: '' 
    helm:
      releaseName: ingress-nginx-internet-facing
      values: |
        admissionWebhooks:
          enabled: true
        controller:
          extraArgs:
            update-status-on-shutdown: false
          config:
            log-format-upstream: >-
              $remote_addr - $host [$time_local] "$request" $status $body_bytes_sent
              "$http_referer" "$http_user_agent" $request_length $request_time
              [$proxy_upstream_name] [$proxy_alternative_upstream_name] $upstream_addr
              $upstream_response_length $upstream_response_time $upstream_status $req_id
            no-tls-redirect-locations: '/healthz,/healthz/'
            redirect-to-https: true
            server-snippet: >-
              if ($proxy_protocol_server_port != '443'){
                return 301 https://$host$request_uri;
              }
            skip-access-log-urls: '/healthz,/healthz/'
            ssl-redirect: false
            use-forwarded-headers: true
            use-proxy-protocol: true
          containerPort:
            http: 80
            https: 443
          electionID: ingress-controller-external-leader
          healthCheckPath: /healthz
          ingressClass: nginx-external
          ingressClassByName: true
          ingressClassResource:
            controllerValue: k8s.io/ingress-nginx-external
            default: false
            enabled: true
            name: nginx-external
          kind: Deployment
          replicaCount: 2
          updateStrategy:
            type: RollingUpdate
            rollingUpdate:
              maxSurge: 1
              maxUnavailable: 0
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
          minReadySeconds: 0
          labels:
            app: ingress-nginx
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                    - key: role
                      operator: In
                      values:
                      - ingress
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchLabels:
                      app: ingress-nginx
                  topologyKey: topology.kubernetes.io/zone
          tolerations:
            - key: karpenter.sh/enabled
              operator: Exists
              effect: NoSchedule
          lifecycle:
            preStop:
              exec:
                command:
                  - "/wait-shutdown"
          # Make sure that the Nginx server is ready by waiting some seconds
          minReadySeconds: 30
          metrics:
            enabled: false
            prometheusRule:
              additionalLabels: {}
              enabled: false
            serviceMonitor:
              enabled: false
          priorityClassName: system-node-critical
          service:
            enabled: true
            type: LoadBalancer
            annotations:
              # General
              service.beta.kubernetes.io/aws-load-balancer-name: k8s-external
              service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
              service.beta.kubernetes.io/aws-load-balancer-type: external
              service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: 300
              service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: '*'
              service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: eks-cluster-name=main,ingress-name=ingress-nginx-external
              service.beta.kubernetes.io/aws-load-balancer-attributes: load_balancing.cross_zone.enabled=true
              # Target group
              service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: deregistration_delay.timeout_seconds=10,deregistration_delay.connection_termination.enabled=true
              service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: instance
              service.beta.kubernetes.io/aws-load-balancer-target-node-labels: role=system
              service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
              # Health check
              service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval: 5
              service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: /healthz
              service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: tcp
              service.beta.kubernetes.io/aws-load-balancer-healthcheck-timeout: 2
              service.beta.kubernetes.io/aws-load-balancer-healthcheck-unhealthy-threshold: 2
              service.beta.kubernetes.io/aws-load-balancer-healthcheck-healthy-threshold: 2
              # SSL
              service.beta.kubernetes.io/aws-load-balancer-ssl-cert: <path:/eks/cluster/main/ingress#external_ssl_cert_arns#AWSCURRENT>
              service.beta.kubernetes.io/aws-load-balancer-ssl-negotiation-policy: ELBSecurityPolicy-TLS13-1-2-2021-06
              service.beta.kubernetes.io/aws-load-balancer-ssl-ports: 443
              # Security group
              service.beta.kubernetes.io/aws-load-balancer-manage-backend-security-group-rules: true
              service.beta.kubernetes.io/load-balancer-source-ranges: 0.0.0.0/0
            enableHttp: true
            enableHttps: true
            httpPort:
              enable: true
              targetPort: http
            httpsPort:
              enable: true
              targetPort: http
            ports:
              http: 80
              https: 443
            targetPorts:
              http: http
              https: http
