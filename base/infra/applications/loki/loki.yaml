apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: loki
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "1"
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: monitoring
  destination:
    namespace: loki
    server: https://kubernetes.default.svc
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    syncOptions:
      - CreateNamespace=true
      - Validate=true
      - RespectIgnoreDifferences=true
      - ServerSideApply=false
    retry:
      limit: 10
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 5m
  source:
    chart: loki
    repoURL: https://grafana.github.io/helm-charts
    targetRevision: 6.2.0
    plugin:
      env:
        - name: HELM_VALUES
          value: |-
            deploymentMode: SimpleScalable
            loki:
              commonConfig:
                replication_factor: 3
              storage:
                type: s3
                bucketNames:
                  chunks: <path:/eks/cluster/main/storage#s3_bucket_loki#AWSCURRENT>
                  ruler: <path:/eks/cluster/main/storage#s3_bucket_loki#AWSCURRENT>
                  admin: <path:/eks/cluster/main/storage#s3_bucket_loki#AWSCURRENT>
                s3:
                  endpoint: s3.<path:/eks/cluster/main/details#region#AWSCURRENT>.amazonaws.com
                  region: <path:/eks/cluster/main/details#region#AWSCURRENT>
                  s3ForcePathStyle: false
                  insecure: false
              schemaConfig:
                configs:
                  - from: 2024-04-01
                    object_store: s3
                    store: tsdb
                    schema: v13
                    index:
                      prefix: index_
                      period: 24h
            serviceAccount:
              create: true
              annotations:
                eks.amazonaws.com/role-arn: <path:/eks/cluster/main/iam/roles#loki#AWSCURRENT>

            singleBinary:
              replicas: 3
              resources: {}
              podLabels: {}
              tolerations: []
              affinity: {}
              nodeSelector: {}
            lokiCanary:
              resources: {}
              tolerations: []
              nodeSelector: {}
            adminApi:
              resources: {}
              podLabels: {}
              tolerations: []
              affinity: {}
              nodeSelector: {}
            gateway:
              resources: {}
              podLabels: {}
              tolerations: []
              affinity: {}
              nodeSelector: {}
            write:
              resources: {}
              podLabels: {}
              tolerations: []
              affinity: {}
              nodeSelector: {}
            read:
              resources: {}
              podLabels: {}
              tolerations: []
              affinity: {}
              nodeSelector: {}
            backend:
              resources: {}
              podLabels: {}
              tolerations: []
              affinity: {}
              nodeSelector: {}
            ingester:
              resources: {}
              podLabels: {}
              tolerations: []
              affinity: {}
              nodeSelector: {}
            distributor:
              resources: {}
              podLabels: {}
              tolerations: []
              affinity: {}
              nodeSelector: {}
            qurerier:
              resources: {}
              podLabels: {}
              tolerations: []
              affinity: {}
              nodeSelector: {}
              nodeSelector: {}
            queryFrontend:
              resources: {}
              podLabels: {}
              tolerations: []
              affinity: {}
              nodeSelector: {}
            queryScheduler:
              resources: {}
              podLabels: {}
              tolerations: []
              affinity: {}
              nodeSelector: {}
            indexGateway:
              resources: {}
              podLabels: {}
              tolerations: []
              affinity: {}
              nodeSelector: {}
